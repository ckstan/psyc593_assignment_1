# include=FALSE hides output of this setup chunk
# Path setup code copied from https://canvas.illinois.edu/courses/49360/files/13546632?wrap=1
# Load packages ----
library(tidyverse)
library(rprojroot) # This package can be used to help with paths
library(here) # This package can also be used to help with paths
### Path variables ----
# root_path <- rprojroot::is_rstudio_project        # Using rprojroot knowing this is an RStudio project
here_path <- here::here()                         # Just using here. It follows additional heuristics
# to try to identify where the root directory should be.
# crit_path <- rprojroot::find_root(has_dir("code")) # Using the directory structure we defined
# Some of the subdirectories
# code_path <- file.path(root_path, "code") # Using the base R function file.path
# docs_path <- here::here("doc")           # Using here
data_path <- file.path(here_path, "data")
raw_data_path <- file.path(data_path, "raw_data")
# figs_path <- file.path(crit_path, "results", "figures")
# Read data ----
# Modified to read in any number of countries in the path folder
data_files <- list.files(path=raw_data_path, pattern="*.csv", full.names=TRUE)
country_names <- list.files(path=raw_data_path, pattern="*.csv") %>%
tools::file_path_sans_ext() %>%
tolower()
# print(country_names)  # We cleaned up the file paths so we have a list of names for later use
country <- lapply(data_files, read_csv) # This reads in all the csv's as data.frame's into a list
list2env(setNames(country,country_names), .GlobalEnv) # Unpack the list of countries we just loaded
# We will use this whenever we need to do a comparison
# between specific countries easily inside R
# Function to create combined person-years variable
sum_py <- function (country) {
country %>%
mutate(py = py.men + py.women)
}
# Function to compute the Crude Birth Rate (CBR)
compute_cbr <- function (population_data) {
population_data%>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute person-years
country<-lapply(country, sum_py)
# Compute CBR for each data set
country_cbr <- lapply(country, compute_cbr)
# Unpack the list of cbr's invisibly
list2env(setNames(country_cbr, paste0(country_names,"_cbr")), .GlobalEnv) # paste0 works like f-strings in Python
kenya_cbr
sweden_cbr
world_cbr
compute_asfr <- function (population_data) {
population_data %>%
mutate(asfr = births / py.women)
}
# Compute how ASFR changes for each particular age group
compare_asfr_across_time <- function(country) {
country %>%
arrange(age, period) %>%
group_by(age) %>%
mutate(asfr_diff = asfr - lag(asfr)) %>%
filter(!is.na(asfr_diff)) %>% # TODO: would like to filter out all the age groups outside the reproductive age range
ungroup() %>%
select(age, asfr_diff)
}
# Run our functions on the datasets
country <- lapply(country, compute_asfr)
# Our modified dataframes are still inside a list, unpack it
list2env(setNames(country,country_names), .GlobalEnv)
# Run comparison for Kenya and Sweden
compare_asfr_across_time(kenya)
compare_asfr_across_time(sweden)
compute_tfr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(tfr = 5 * sum(asfr)) %>%
pull()
}
# Compute totals of women and births in the world by period
world_totals <- world %>%
group_by(period) %>%
summarise(total_women=sum(py.women),total_births=sum(births))
# Compare how much these totals have changed, removed parentheses to hide
changes_totals <- world_totals[2,-1] / world_totals[1,-1]
changes_summed <- world_totals[2,-1] - world_totals[1,-1]
# TODO: tfr is currently not being used in any part of the code, though
# the instructions say to store the resulting TFR's as a vector.
# Run on all datasets
country_tfr <- lapply(country, compute_tfr)
# New dataframes are still inside a list, unpack it for later use
list2env(setNames(country_tfr,paste0(country_names,"_tfr")), .GlobalEnv)
# Function to compute the Crude death rate (CDR)
compute_cdr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(cbr = sum(deaths) / sum(py)) %>%
pull()
}
# Compute the CDR for each data set
country_cdr <- lapply(country, compute_cdr)
# New dataframes are still inside a list, unpack it for later use
list2env(setNames(country_cdr,paste0(country_names,"_cdr")), .GlobalEnv)
kenya_cdr
sweden_cdr
world_cdr
# Function to compute Age specific death rate (ASDR)
compute_asdr <- function (population_data) {
population_data %>%
mutate(asdr = deaths/py)
}
# Compute ASDR for each data set
country <- lapply(country, compute_asdr)
list2env(setNames(country,country_names), .GlobalEnv)
# Show ASDR's for Kenya and Sweden from 2005 to 2010
(kenya %>%
filter(period == "2005-2010") %>%
select(age, asdr))
(sweden %>%
filter(period == "2005-2010") %>%
select(age, asdr))
compute_pop_prop <- function (population_data) {
population_data %>%
group_by(period) %>%
mutate(pop_prop = py / sum(py)) %>%
ungroup()
}
# Compute population proportion for each data set
country <- lapply(country, compute_pop_prop)
list2env(setNames(country,country_names), .GlobalEnv)
# Compute Kenyas CDR if Kenya had Sweden's population distribution
(mutate(kenya,
swap_cdr = kenya$asdr * sweden$pop_prop) %>%
group_by(period) %>%
summarise(cdrresweden = sum(swap_cdr))
)
# Pull up Kenya's real CDR from 2005-2010 for comparison
(kenya_cdr[2])
# include=FALSE hides output of this setup chunk
# Path setup code copied from https://canvas.illinois.edu/courses/49360/files/13546632?wrap=1
# Load packages ----
library(tidyverse)
library(rprojroot) # This package can be used to help with paths
library(here) # This package can also be used to help with paths
### Path variables ----
root_path <- rprojroot::is_rstudio_project        # Using rprojroot knowing this is an RStudio project
# here_path <- here::here()                         # Just using here. It follows additional heuristics
# to try to identify where the root directory should be.
# crit_path <- rprojroot::find_root(has_dir("code")) # Using the directory structure we defined
# Some of the subdirectories
# code_path <- file.path(root_path, "code") # Using the base R function file.path
# docs_path <- here::here("doc")           # Using here
data_path <- file.path(root_path, "data")
raw_data_path <- file.path(root_path, "raw_data")
# figs_path <- file.path(crit_path, "results", "figures")
# Read data ----
# Modified to read in any number of countries in the path folder
data_files <- list.files(path=raw_data_path, pattern="*.csv", full.names=TRUE)
country_names <- list.files(path=raw_data_path, pattern="*.csv") %>%
tools::file_path_sans_ext() %>%
tolower()
# print(country_names)  # We cleaned up the file paths so we have a list of names for later use
country <- lapply(data_files, read_csv) # This reads in all the csv's as data.frame's into a list
list2env(setNames(country,country_names), .GlobalEnv) # Unpack the list of countries we just loaded
# We will use this whenever we need to do a comparison
# between specific countries easily inside R
# Function to create combined person-years variable
sum_py <- function (country) {
country %>%
mutate(py = py.men + py.women)
}
# Function to compute the Crude Birth Rate (CBR)
compute_cbr <- function (population_data) {
population_data%>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute person-years
country<-lapply(country, sum_py)
# Compute CBR for each data set
country_cbr <- lapply(country, compute_cbr)
# Unpack the list of cbr's invisibly
list2env(setNames(country_cbr, paste0(country_names,"_cbr")), .GlobalEnv) # paste0 works like f-strings in Python
# include=FALSE hides output of this setup chunk
# Path setup code copied from https://canvas.illinois.edu/courses/49360/files/13546632?wrap=1
# Load packages ----
library(tidyverse)
library(rprojroot) # This package can be used to help with paths
library(here) # This package can also be used to help with paths
### Path variables ----
root_path <- rprojroot::is_rstudio_project        # Using rprojroot knowing this is an RStudio project
# here_path <- here::here()                         # Just using here. It follows additional heuristics
# to try to identify where the root directory should be.
# crit_path <- rprojroot::find_root(has_dir("code")) # Using the directory structure we defined
# Some of the subdirectories
# code_path <- file.path(root_path, "code") # Using the base R function file.path
# docs_path <- here::here("doc")           # Using here
data_path <- file.path(root_path, "data")
raw_data_path <- file.path(data_path, "raw_data")
# figs_path <- file.path(crit_path, "results", "figures")
# Read data ----
# Modified to read in any number of countries in the path folder
data_files <- list.files(path=raw_data_path, pattern="*.csv", full.names=TRUE)
country_names <- list.files(path=raw_data_path, pattern="*.csv") %>%
tools::file_path_sans_ext() %>%
tolower()
# print(country_names)  # We cleaned up the file paths so we have a list of names for later use
country <- lapply(data_files, read_csv) # This reads in all the csv's as data.frame's into a list
list2env(setNames(country,country_names), .GlobalEnv) # Unpack the list of countries we just loaded
# We will use this whenever we need to do a comparison
# between specific countries easily inside R
# Function to create combined person-years variable
sum_py <- function (country) {
country %>%
mutate(py = py.men + py.women)
}
# Function to compute the Crude Birth Rate (CBR)
compute_cbr <- function (population_data) {
population_data%>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute person-years
country<-lapply(country, sum_py)
# Compute CBR for each data set
country_cbr <- lapply(country, compute_cbr)
# Unpack the list of cbr's invisibly
list2env(setNames(country_cbr, paste0(country_names,"_cbr")), .GlobalEnv) # paste0 works like f-strings in Python
View(root_path)
View(root_path)
View(root_path)
# include=FALSE hides output of this setup chunk
# Path setup code copied from https://canvas.illinois.edu/courses/49360/files/13546632?wrap=1
# Load packages ----
library(tidyverse)
library(rprojroot) # This package can be used to help with paths
library(here) # This package can also be used to help with paths
### Path variables ----
# root_path <- rprojroot::is_rstudio_project        # Using rprojroot knowing this is an RStudio project
here_path <- here::here()                         # Just using here. It follows additional heuristics
# to try to identify where the root directory should be.
# crit_path <- rprojroot::find_root(has_dir("code")) # Using the directory structure we defined
# Some of the subdirectories
# code_path <- file.path(root_path, "code") # Using the base R function file.path
# docs_path <- here::here("doc")           # Using here
data_path <- file.path(here_path, "data")
raw_data_path <- file.path(data_path, "raw_data")
# figs_path <- file.path(crit_path, "results", "figures")
# Read data ----
# Modified to read in any number of countries in the path folder
data_files <- list.files(path=raw_data_path, pattern="*.csv", full.names=TRUE)
country_names <- list.files(path=raw_data_path, pattern="*.csv") %>%
tools::file_path_sans_ext() %>%
tolower()
# print(country_names)  # We cleaned up the file paths so we have a list of names for later use
country <- lapply(data_files, read_csv) # This reads in all the csv's as data.frame's into a list
list2env(setNames(country,country_names), .GlobalEnv) # Unpack the list of countries we just loaded
# We will use this whenever we need to do a comparison
# between specific countries easily inside R
# Function to create combined person-years variable
sum_py <- function (country) {
country %>%
mutate(py = py.men + py.women)
}
# Function to compute the Crude Birth Rate (CBR)
compute_cbr <- function (population_data) {
population_data%>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute person-years
country<-lapply(country, sum_py)
# Compute CBR for each data set
country_cbr <- lapply(country, compute_cbr)
# Unpack the list of cbr's invisibly
list2env(setNames(country_cbr, paste0(country_names,"_cbr")), .GlobalEnv) # paste0 works like f-strings in Python
kenya_cbr
sweden_cbr
world_cbr
compute_asfr <- function (population_data) {
population_data %>%
mutate(asfr = births / py.women)
}
# Compute how ASFR changes for each particular age group
compare_asfr_across_time <- function(country) {
country %>%
arrange(age, period) %>%
group_by(age) %>%
mutate(asfr_diff = asfr - lag(asfr)) %>%
filter(!is.na(asfr_diff)) %>% # TODO: would like to filter out all the age groups outside the reproductive age range
ungroup() %>%
select(age, asfr_diff)
}
# Run our functions on the datasets
country <- lapply(country, compute_asfr)
# Our modified dataframes are still inside a list, unpack it
list2env(setNames(country,country_names), .GlobalEnv)
# Run comparison for Kenya and Sweden
compare_asfr_across_time(kenya)
compare_asfr_across_time(sweden)
compute_tfr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(tfr = 5 * sum(asfr)) %>%
pull()
}
# Compute totals of women and births in the world by period
world_totals <- world %>%
group_by(period) %>%
summarise(total_women=sum(py.women),total_births=sum(births))
# Compare how much these totals have changed, removed parentheses to hide
changes_totals <- world_totals[2,-1] / world_totals[1,-1]
changes_summed <- world_totals[2,-1] - world_totals[1,-1]
# TODO: tfr is currently not being used in any part of the code, though
# the instructions say to store the resulting TFR's as a vector.
# Run on all datasets
country_tfr <- lapply(country, compute_tfr)
# New dataframes are still inside a list, unpack it for later use
list2env(setNames(country_tfr,paste0(country_names,"_tfr")), .GlobalEnv)
# Function to compute the Crude death rate (CDR)
compute_cdr <- function (population_data) {
population_data %>%
group_by(period) %>%
summarise(cbr = sum(deaths) / sum(py)) %>%
pull()
}
# Compute the CDR for each data set
country_cdr <- lapply(country, compute_cdr)
# New dataframes are still inside a list, unpack it for later use
list2env(setNames(country_cdr,paste0(country_names,"_cdr")), .GlobalEnv)
kenya_cdr
sweden_cdr
world_cdr
# Function to compute Age specific death rate (ASDR)
compute_asdr <- function (population_data) {
population_data %>%
mutate(asdr = deaths/py)
}
# Compute ASDR for each data set
country <- lapply(country, compute_asdr)
list2env(setNames(country,country_names), .GlobalEnv)
# Show ASDR's for Kenya and Sweden from 2005 to 2010
(kenya %>%
filter(period == "2005-2010") %>%
select(age, asdr))
(sweden %>%
filter(period == "2005-2010") %>%
select(age, asdr))
compute_pop_prop <- function (population_data) {
population_data %>%
group_by(period) %>%
mutate(pop_prop = py / sum(py)) %>%
ungroup()
}
# Compute population proportion for each data set
country <- lapply(country, compute_pop_prop)
list2env(setNames(country,country_names), .GlobalEnv)
# Compute Kenyas CDR if Kenya had Sweden's population distribution
(mutate(kenya,
swap_cdr = kenya$asdr * sweden$pop_prop) %>%
group_by(period) %>%
summarise(cdrresweden = sum(swap_cdr))
)
# Pull up Kenya's real CDR from 2005-2010 for comparison
(kenya_cdr[2])
# include=FALSE hides output of this setup chunk
# Path setup code copied from https://canvas.illinois.edu/courses/49360/files/13546632?wrap=1
# Load packages ----
library(tidyverse)
library(rprojroot) # This package can be used to help with paths
library(here) # This package can also be used to help with paths
### Path variables ----
root_path <- rprojroot::is_rstudio_project        # Using rprojroot knowing this is an RStudio project
# here_path <- here::here()                         # Just using here. It follows additional heuristics
# to try to identify where the root directory should be.
crit_path <- rprojroot::find_root(has_dir("code")) # Using the directory structure we defined
# Some of the subdirectories
# code_path <- file.path(root_path, "code") # Using the base R function file.path
# docs_path <- here::here("doc")           # Using here
data_path <- file.path(root_path, "data")
raw_data_path <- file.path(data_path, "raw_data")
# figs_path <- file.path(crit_path, "results", "figures")
# Read data ----
# Modified to read in any number of countries in the path folder
data_files <- list.files(path=raw_data_path, pattern="*.csv", full.names=TRUE)
country_names <- list.files(path=raw_data_path, pattern="*.csv") %>%
tools::file_path_sans_ext() %>%
tolower()
# print(country_names)  # We cleaned up the file paths so we have a list of names for later use
country <- lapply(data_files, read_csv) # This reads in all the csv's as data.frame's into a list
list2env(setNames(country,country_names), .GlobalEnv) # Unpack the list of countries we just loaded
# We will use this whenever we need to do a comparison
# between specific countries easily inside R
# Function to create combined person-years variable
sum_py <- function (country) {
country %>%
mutate(py = py.men + py.women)
}
# Function to compute the Crude Birth Rate (CBR)
compute_cbr <- function (population_data) {
population_data%>%
group_by(period) %>%
summarise(cbr = sum(births) / sum(py)) %>%
pull()
}
# Compute person-years
country<-lapply(country, sum_py)
# Compute CBR for each data set
country_cbr <- lapply(country, compute_cbr)
# Unpack the list of cbr's invisibly
list2env(setNames(country_cbr, paste0(country_names,"_cbr")), .GlobalEnv) # paste0 works like f-strings in Python
# include=FALSE hides output of this setup chunk
# Path setup code copied from https://canvas.illinois.edu/courses/49360/files/13546632?wrap=1
# Load packages ----
library(tidyverse)
library(rprojroot) # This package can be used to help with paths
library(here) # This package can also be used to help with paths
### Path variables ----
# root_path <- rprojroot::is_rstudio_project        # Using rprojroot knowing this is an RStudio project
here_path <- here::here()                         # Just using here. It follows additional heuristics
# to try to identify where the root directory should be.
# crit_path <- rprojroot::find_root(has_dir("code")) # Using the directory structure we defined
# Some of the subdirectories
# code_path <- file.path(root_path, "code") # Using the base R function file.path
# docs_path <- here::here("doc")           # Using here
data_path <- file.path(root_path, "data")
root_path <- rprojroot::has_file("TODO")
View(root_path)
root_path <- rprojroot::is_rstudio_project
View(root_path)
get_wd()
getwd()
getwd()
